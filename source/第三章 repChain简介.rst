repChain简介
====================

简介
-------------

项目背景
++++++++++++++++++

RepChain是面向工程实践、易于集成的区块链核心组件，全称为Responsive Permission Chain，顾名思义，是采用响应式编程实现自主可控的许可链，具有标准化、模块化、可视化三个特征。
	标准化：尽可能采用经过工程实践认证的标准组件，在基本功能稳定，满足工程实施的基础上大幅减少代码量，方便他人改造使用。
	模块化：节点间以消息格式交互，节点内部以状态驱动，具备模块替换的可行性。
	可视化：将复杂的交易传播、共识入块的过程直观化。
	许可链不同于公开链与传统的中心化应用，它在身份准入的基础上建立安全信道，利用区块链的去中心化特征，解决多个对等主体之间信任问题，达到降低共识成本、提高交易实时性和交易通量的目的。大多开源区块链代码体量大、模块耦合度高，在行业应用场景中存在不足，RepChain正是以此为目标诞生的一款区块链核心组件。
	

项目目标
++++++++++++++++

RepChain的开发目标即是使区块链与企业级行业应用更好融合，RepChain的标准化、模块化、可视化三大特性使其可以适用于多种不同的应用场景。
	在保险行业领域，RepChain适用于签约环节中的体检结果入链和理赔环节的证据入链共享环节，利用区块链的不可篡改特性和许可链中的可信节点共享特性，防范保险行业中的理赔欺诈风险，并实现理赔的便捷与成本的节省。
	在数字资产领域，RepChain适用于数字资产分配、持有证明和资产转移等方面。资产数字化的趋势正在发生，除积分、信贷等金融资产外，还包括图片、书籍等实物资产，完成数字资产和数字身份的对应后，数字资产就可以完成赠送、转让、租赁等资产转移，这正是区块链中的智能合约发挥作用之处。
	在物联网领域，RepChain适用于嵌入式系统签名和食品溯源。在嵌入式系统签名方面，通过技术保证签名的不可篡改性，降低违约以及法律纠纷的风险；在食品溯源方面，RepChain能保障平台数据的不可篡改并对信息进行加密保护，保护消费者的利益。
	除此之外，在税务、工商、土地等政务服务方面，RepChain也能相应发挥作用。

区块链是什么
------------------------

狭义来讲，区块链是一种按照时间顺序将数据区块以顺序相连的方式组合成的一种链式数据结构， 并以密码学方式保证的不可篡改和不可伪造的分布式账本。
广义来讲，区块链技术是利用块链式数据结构来验证与存储数据、利用分布式节点共识算法来生成和更新数据、利用密码学的方式保证数据传输和访问的安全、利用由自动化脚本代码组成的智能合约来编程和操作数据的一种全新的分布式基础架构与计算范式 。
区块链技术相关的数据对象结构包括上述区块、事务、实体、合约、账户、配置、六个主要数据对象。其中区块链核心的数据对象包括、事务实体和合约。每一区块数据对象中包含一个或多个事务数据对象，每个事务对象包括属性类的实体数据对象，还包括事务的业务逻辑，即合约数据对象。在区块链核心数据对象之外，包括配置数据对象，提供区块链系统正常运行过程中所需的配置信息。配置数据对象和区块链核心数据对象共同构建了区块链运行所需的基础数据基础。而账户数据对象表示区块链业务的实际发起者和相关方对应的数据结构。


分布式账本
--------------------
如果我们把数据库假设成一本账本，读写数据库就可以看做一种记账的行为，区块链技术的原理就是在一段时间内找出记账最快最好的人，由这个人来记账，然后将账本的这一页信息发给整个系统里的其他所有人。这也就相当于改变数据库所有的记录，发给全网的其他每个节点，所以区块链技术也称为分布式账本（distributed ledger）。


智能合约
---------------
一个智能合约是一套以数字形式定义的承诺（promises），包括合约参与方可以在上面执行这些承诺的协议。智能合约是基于这些可信的不可篡改的数据，可以自动化的执行一些预先定义好的规则和条款。

共识
------------
共识机制，就是所有记账节点之间怎么达成共识，去认定一个记录的有效性，这既是认定的手段，也是防止篡改的手段。区块链提出了四种不同的共识机制，适用于不同的应用场景，在效率和安全性之间取得平衡。以比特币为例，采用的是工作量证明，只有在控制了全网超过51%的记账节点的情况下，才有可能伪造出一条不存在的记录。当加入区块链的节点足够多的时候，这基本上不可能，从而杜绝了造假的可能。

repChain是什么
---------------------

RepChain系统共分为六层，从底层到上层分别是数据层、网络层、共识层、合约层、API层、监控层。
	数据层负责数据格式定义，并以此为基础实现数据的交换、验证、存储、读取及检索。
	网络层采用JDK内置的TLS实现，支持入网许可验证，在此基础上进行去中心化的


返回 :ref:`index`