智能合约
=============

8.1 了解智能合约
-----------------------------

智能合约可以看做是一个跨学科的复合名词，合约取自法律上的合同概念，智能指的是能自动执行的计算机程序，
合在一起的智能合约就是能像计算机程序一样自动执行的法律合同。

要实现智能合约，首先需要使用计算机语言编写合同中的条款，然后将编写的程序部署到区块链上去执行。
从计算机用户的角度来看，智能合约可以限定为更好理解的智能合约代码。

智能合约最早的形式是比特币中的扩展脚本，由于比特币设计之初并没有考虑智能合约，因此这种扩展脚本受到诸多限制，
后来Ethereum平台设计了合约编程语言solidity，提供了执行合约的虚拟机，进一步提升了智能合约的表述能力。
由于区块链智能合约在商业上应用面临法律效力问题，因此现有智能合约一般会在代码中存储一份相应的法律合同文本文件，
以应对法律风险。到今天，除了法律合同，智能合约已经应用到了更多的场景中，比如数字化交易所、供应链、物流等。

8.2 编写智能合约
---------------------

8.2.1 语言选择
+++++++++++++++++++

目前repChain支持js和scala两种语言，根据判断可以进行选择执行哪种合约。

8.2.2 合约样例
+++++++++++++++++

.. code-block:: python
   :linenos:
   
	function write(pn,pv){
		shim.setVal(pn,pv);
	}
	function read(pn){
		return shim.getVal(pn);
	}

	function put_proof(pn,pv){	
		//先检查该hash是否已经存在,如果已存在,抛异常
		var pv0 = read(pn);
		if(pv0)
			throw '['+pn+']已存在，当前值['+pv0+']';
		shim.setVal(pn,pv);
		print('putProof:'+pn+':'+pv);
	}
	function signup(cert,inf){
		//判断非节点账户，节点账户可以注册
		//var inf1 =read(pn);
		//在注册合约中对签名账户的类型判断，非节点账户抛出异常
		//if(inf1)
		//   throw'非节点账户';
		return shim.signup(cert,inf);
	}
	
8.3. 合约部署
------------------

8.3.1 目录结构
+++++++++++++++++
